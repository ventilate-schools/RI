import os
import re
from collections import defaultdict

def extract_grades(file_path):
    """Extract numeric grades from markdown files based on a specific pattern."""
    pattern = r"\*\*School's overall airborne virus protection grade \(0-5\)\*\*: (\d)"
    grades = []
    with open(file_path, 'r') as file:
        for line in file:
            match = re.search(pattern, line)
            if match:
                grade = int(match.group(1))
                grades.append(grade)
    return grades

def write_html(file_path, frequencies, where):
    """Write frequency of grades to an HTML file."""
    with open(file_path, 'w') as file:
        file.write('<!-- This file is generated by a Python Script - do not edit it to update numbers please -->\n')
        file.write('<p><b>Ventilation grade breakdown for schools in ' + where + ':</b></p>\n<ul>\n')
        for grade, freq in sorted(frequencies.items()):
            file.write(f'<li>Grade {grade}: {freq}</li>\n')
        file.write('</ul>\n')

def calculate_frequencies(grades):
    """Calculate the frequency of each grade."""
    return {grade: grades.count(grade) for grade in set(grades)}

def analyze_directory(base_path):
    """Analyze all markdown files in the directory tree starting from base_path."""
    grade_map = defaultdict(list)
    processed_files = set()

    # Walk through all files and directories within the base_path
    for root, dirs, files in os.walk(base_path):
        # Skip the .git directory
        dirs[:] = [d for d in dirs if d != '.git']

        local_grades = []
        for file in files:
            if file.endswith('.md'):
                file_path = os.path.join(root, file)
                if file_path not in processed_files:
                    grades = extract_grades(file_path)
                    local_grades.extend(grades)
                    grade_map[root].extend(grades)
                    processed_files.add(file_path)

        if local_grades:
            freq = calculate_frequencies(local_grades)
            write_html(os.path.join(root, 'grade.html'), freq, os.path.basename(root))

    # Aggregate statistics for parent directories
    parent_grade_map = defaultdict(list)
    for root, dirs, files in os.walk(base_path, topdown=False):
        if root == base_path:
            continue
        parent_dir = os.path.dirname(root)
        parent_grade_map[parent_dir].extend(grade_map[root])
        freq = calculate_frequencies(parent_grade_map[parent_dir])
        write_html(os.path.join(parent_dir, 'grade.html'), freq, os.path.basename(parent_dir))

    # Aggregate statistics for the entire base_path
    total_grades = []
    for grades in grade_map.values():
        total_grades.extend(grades)
    if total_grades:
        total_freq = calculate_frequencies(total_grades)
        write_html(os.path.join(base_path, 'grade.html'), total_freq, os.path.basename(base_path))

# Run the analysis for the current working directory
analyze_directory(os.getcwd())
